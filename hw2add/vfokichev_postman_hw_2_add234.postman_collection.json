{
	"info": {
		"_postman_id": "12b8e6b8-fea6-428d-8b29-bb1d8d35fdae",
		"name": "vfokichev_postman_hw_2_add234",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21443364"
	},
	"item": [
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let json_resp = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let data_req = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"test name compare from request\", function () {\r",
							"    pm.expect(json_resp.name).to.eql(data_req.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"test age compare from request\", function () {\r",
							"    pm.expect(json_resp.age).to.eql(parseInt(data_req.age));\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(data_req.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(json_resp.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(json_resp.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(json_resp.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(json_resp.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"for (let i = 0; i < 3; i++) {\r",
							"    pm.test(\"test что \" + i + \"-й элемент параметра salary \"+json_resp.salary[i]+\" равен salary*\"+(i+1)+\" из request\", function () {\r",
							"        pm.expect(parseInt(json_resp.salary[i])).to.eql(parseInt(data_req.salary) * (i+1));\r",
							"    });\r",
							"}\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set('name');\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set('age');\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set('salary');\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set('name', 'Lena');\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set('age', 25);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set('salary', 60000);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"json_resp.salary.forEach(elem => console.log(elem));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let json_resp = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let data_req = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"test name, age, salary compare from request\", function () {\r",
							"    data_req.salary = parseInt(data_req.salary);\r",
							"    pm.expect(json_resp).to.deep.include(data_req);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(json_resp.family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"test dog contains name\", function () {\r",
							"    pm.expect(json_resp.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"test dog contains age\", function () {\r",
							"    pm.expect(json_resp.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"test dog name is Luky\", function () {\r",
							"    pm.expect(json_resp.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"test dog age is 4\", function () {\r",
							"    pm.expect(json_resp.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// начаало в Pre-request Script\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let json_resp = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let json_req = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"const params_names = ['start_qa_salary', 'qa_salary_after_6_months', 'qa_salary_after_12_months', 'qa_salary_after_1.5_year', 'qa_salary_after_3.5_years', 'person'];\r",
							"\r",
							"for (let i = 0; i < params_names.length; i++) {\r",
							"    pm.test(\"test test response contains \" + params_names[i], function () {\r",
							"        pm.expect(json_resp).to.have.property(params_names[i]);\r",
							"    });\r",
							"}\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"const salary_names = ['start_qa_salary', 'qa_salary_after_6_months', 'qa_salary_after_12_months', 'qa_salary_after_1.5_year', 'qa_salary_after_3.5_years'];\r",
							"const salary_ratio = [1, 2, 2.7, 3.3, 3.8]\r",
							"\r",
							"for (let i = 0; i < salary_names.length; i++) {\r",
							"    pm.test(\"test что параметр \" + salary_names[i] + \" равен salary*\" + salary_ratio[i], function () {\r",
							"        pm.expect(json_resp[salary_names[i]]).to.eql(parseInt(json_req.salary) * salary_ratio[i]);\r",
							"    });\r",
							"}\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"test что в параметре person, 1-й элемент из u_name равен salary из request\", function () {\r",
							"    pm.expect(json_resp.person.u_name[1]).to.eql(parseInt(json_req.salary));\r",
							"});\r",
							"\r",
							"// 20. Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"test что параметр u_age равен age из request\", function () {\r",
							"    pm.expect(json_resp.person.u_age).to.eql(parseInt(json_req.age));\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"test что параметр u_salary_5_years равен salary*4.2 из request\", function () {\r",
							"    pm.expect(json_resp.person.u_salary_5_years).to.eql(parseInt(json_req.salary) * 4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let dict = json_resp.person;\r",
							"for (let key in dict){\r",
							"    console.log(key, dict[key]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"request.data['salary'] = pm.environment.get('salary')\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"request.data['age'] = pm.environment.get('age')\r",
							"\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"request.data['name'] = pm.environment.get('name');\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}