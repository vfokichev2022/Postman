{
	"info": {
		"_postman_id": "fc3776b3-cd2a-4008-a9a8-191919748a9f",
		"name": "vfokichev_postman_hw_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21443364"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resp_json = pm.response.json();\r",
							"\r",
							"const user_token = resp_json.token;\r",
							"console.log(user_token);\r",
							"\r",
							"pm.environment.set(\"auth_token\", user_token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "beta2013",
							"type": "text"
						},
						{
							"key": "password",
							"value": "QA_beta2013",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const user_info_schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test('JSON schema is valid (ver 1)', function () {\r",
							"    pm.response.to.have.jsonSchema(user_info_schema);\r",
							"});\r",
							"\r",
							"let resp_json = pm.response.json();\r",
							"\r",
							"pm.test('JSON schema is valid (ver 2)', function() {\r",
							"    pm.expect(tv4.validate(resp_json, user_info_schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"test qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp_json.qa_salary_after_6_months).to.eql(parseInt(resp_json.start_qa_salary) * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"test qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp_json.qa_salary_after_12_months).to.eql(parseInt(resp_json.start_qa_salary) * 2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"test person.u_salary_1_5_year\", function () {\r",
							"    pm.expect(resp_json.person.u_salary_1_5_year).to.eql(parseInt(resp_json.start_qa_salary) * 4);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"salary_1_5\", resp_json.person.u_salary_1_5_year);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n    \"age\": {{age}},\r\n    \"salary\": {{salary}},\r\n    \"name\": \"{{name}}\",\r\n    \"auth_token\": \"{{auth_token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const new_data_schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"let resp_json = pm.response.json();\r",
							"\r",
							"pm.test('JSON schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(new_data_schema);\r",
							"});\r",
							"\r",
							"let salary = +resp_json.salary[0];\r",
							"let salary2 = +resp_json.salary[1];\r",
							"let salary3 = +resp_json.salary[2];\r",
							"\r",
							"console.log(\"salary = \" + salary);\r",
							"console.log(\"salary2 = \" + salary2);\r",
							"console.log(\"salary3 = \" + salary3);\r",
							"\r",
							"pm.test(\"test salary * 2\", function () {\r",
							"    pm.expect(salary2).to.eql(salary * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"test salary * 2\", function () {\r",
							"    pm.expect(salary3).to.eql(salary * 3);\r",
							"});\r",
							"\r",
							"pm.test(\"test salary[2] > salary[0]\", function () {\r",
							"    pm.expect(salary2 > salary);\r",
							"});\r",
							"\r",
							"pm.test(\"test salary[2] > salary[1]\", function () {\r",
							"    pm.expect(salary3 > salary2);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const test_pet_info_schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"let resp_json = pm.response.json();\r",
							"let req_json = request.data;\r",
							"let weight = +req_json.weight;\r",
							"\r",
							"pm.test('JSON schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(test_pet_info_schema);\r",
							"});\r",
							"\r",
							"pm.test(\"test daily_food = weight * 0.012\", function () {\r",
							"    pm.expect(resp_json.daily_food).to.eql(weight * 0.012);\r",
							"});\r",
							"\r",
							"pm.test(\"test daily_sleep = weight * 2.5\", function () {\r",
							"    pm.expect(resp_json.daily_sleep).to.eql(weight * 2.5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "{{weight}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		}
	]
}